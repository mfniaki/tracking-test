// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name JentisSDK
import CoreTelephony
import Foundation
@_exported import JentisSDK
import Network
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public struct VariablesWrapper {
  public let documentLocationHref: Swift.String
  public let fbBrowserId: Swift.String
  public let jtspushedcommands: [Swift.String]
  public let customProperties: [Swift.String : JentisSDK.CodableValue]
  public init(documentLocationHref: Swift.String, fbBrowserId: Swift.String, jtspushedcommands: [Swift.String], customProperties: [Swift.String : JentisSDK.CodableValue] = [:])
}
public struct ConsentModel : Swift.Codable {
  public let version: Swift.String
  public let system: JentisSDK.ConsentModel.System
  public let configuration: JentisSDK.ConsentModel.Configuration
  public let data: JentisSDK.ConsentModel.DataClass
  public struct System : Swift.Codable {
    public let type: Swift.String
    public let timestamp: Swift.Int
    public let navigatorUserAgent: Swift.String
    public let initiator: Swift.String
    public enum CodingKeys : Swift.String, Swift.CodingKey {
      case type, timestamp
      case navigatorUserAgent
      case initiator
      public init?(rawValue: Swift.String)
      public init?(stringValue: Swift.String)
      public init?(intValue: Swift.Int)
      public typealias RawValue = Swift.String
      public var intValue: Swift.Int? {
        get
      }
      public var rawValue: Swift.String {
        get
      }
      public var stringValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Configuration : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DataClass : Swift.Codable {
    public let identifier: JentisSDK.ConsentModel.DataClass.Identifier
    public let consent: JentisSDK.ConsentModel.DataClass.Consent
    public struct Identifier : Swift.Codable {
      public let user: JentisSDK.ConsentModel.DataClass.Identifier.User
      public let consent: JentisSDK.ConsentModel.DataClass.Identifier.ConsentID
      public struct User : Swift.Codable {
        public let id: Swift.String
        public let action: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public struct ConsentID : Swift.Codable {
        public let id: Swift.String
        public let action: Swift.String
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Consent : Swift.Codable {
      public let lastupdate: Swift.Int
      public let data: [Swift.String : Swift.String]
      public var vendors: [Swift.String : JentisSDK.ConsentModel.DataClass.Consent.VendorValue]
      public var vendorsChanged: [Swift.String : JentisSDK.ConsentModel.DataClass.Consent.VendorValue]
      public enum VendorValue : Swift.Codable, Swift.Equatable {
        case bool(Swift.Bool)
        case string(Swift.String)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public static func == (lhs: JentisSDK.ConsentModel.DataClass.Consent.VendorValue, rhs: JentisSDK.ConsentModel.DataClass.Consent.VendorValue) -> Swift.Bool
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SessionManager {
  public static func setSessionTimeout(_ timeout: Foundation.TimeInterval)
  public static func startObservingAppLifecycle()
  public static func startOrResumeSession() -> (Swift.String, JentisSDK.Action)
  public static func endSession()
  public static func setLastActiveTimestamp(_ timestamp: Foundation.TimeInterval)
  public static func getLastActiveTimestamp() -> Foundation.TimeInterval
  public static func setCurrentSessionID(_ sessionID: Swift.String?)
  public static func getCurrentSessionID() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TrackingSettings {
  public static var shared: JentisSDK.TrackingSettings {
    get
  }
  public static func configure(config: JentisSDK.TrackConfig)
  public var trackDomain: Swift.String {
    get
  }
  public var container: Swift.String {
    get
  }
  public var environment: JentisSDK.TrackConfig.Environment {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var debugCode: Swift.String? {
    get
  }
  public var sessionTimeoutInSeconds: Foundation.TimeInterval? {
    get
  }
  public var authorizationToken: Swift.String {
    get
  }
  public var customProtocol: Swift.String? {
    get
  }
  public var enableOfflineTracking: Swift.Bool {
    get
  }
  public var offlineTrackingTimeout: Foundation.TimeInterval {
    get
  }
  public static func loadConfigFromUserDefaults()
  public static func clearConfigFromUserDefaults()
  @objc deinit
}
public enum CodableValue : Swift.Codable, Swift.Equatable {
  case string(Swift.String)
  case bool(Swift.Bool)
  case integer(Swift.Int)
  case decimalNumber(Swift.Double)
  case array([JentisSDK.CodableValue])
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: JentisSDK.CodableValue, rhs: JentisSDK.CodableValue) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class TrackingService {
  public static var shared: JentisSDK.TrackingService {
    get throws
  }
  public static func resetInstance()
  public func setConsents(_ vendorConsents: [Swift.String : JentisSDK.ConsentStatus]) async -> Swift.Result<Swift.Bool, any Swift.Error>
  @objc deinit
}
extension JentisSDK.TrackingService {
  public func push(_ customProperties: [Swift.String : Any])
  public func submit(skipAddingSubmitCommand: Swift.Bool = false, _ customInitiator: Swift.String? = nil) async throws
  public func addEnrichment(pluginId: Swift.String? = nil, arguments: [Swift.String : Any], variables: [Swift.String])
  public func addCustomEnrichment(pluginId: Swift.String? = nil, arguments: [Swift.String : JentisSDK.CodableValue], variables: [Swift.String])
  public func addToCart(_ customProperties: [Swift.String : Any]) async throws
}
@_hasMissingDesignatedInitializers public class TimestampUtility {
  public static func currentTimestampInMillis() -> Swift.Int
  @objc deinit
}
public enum LogLevel : Swift.Int {
  case debug
  case info
  case warning
  case error
  case critical
  case performance
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension JentisSDK.LogLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum Action : Swift.String {
  case new
  case update
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentStatus : Swift.Codable {
  case allow
  case deny
  case ncm
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case allow
    case deny
    case ncm
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public func toVendorValue() -> JentisSDK.ConsentModel.DataClass.Consent.VendorValue
  public static func == (a: JentisSDK.ConsentStatus, b: JentisSDK.ConsentStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class JentisService {
  public static func setLogLevel(_ level: JentisSDK.LogLevel)
  public static func configure(with config: JentisSDK.TrackConfig)
  @objc deinit
}
public struct TrackConfig : Swift.Codable {
  public enum Environment : Swift.String, Swift.CaseIterable, Swift.Codable {
    case live, stage
    public init?(rawValue: Swift.String)
    public typealias AllCases = [JentisSDK.TrackConfig.Environment]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [JentisSDK.TrackConfig.Environment] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public let trackDomain: Swift.String
  public let container: Swift.String
  public let environment: JentisSDK.TrackConfig.Environment
  public let version: Swift.String?
  public let debugCode: Swift.String?
  public let sessionTimeoutInSeconds: Foundation.TimeInterval?
  public let authorizationToken: Swift.String
  public var customProtocol: Swift.String?
  public let enableOfflineTracking: Swift.Bool
  public let offlineTrackingTimeout: Foundation.TimeInterval
  public init(trackDomain: Swift.String, container: Swift.String, environment: JentisSDK.TrackConfig.Environment, version: Swift.String? = nil, debugCode: Swift.String? = nil, sessionTimeoutInSeconds: Foundation.TimeInterval? = nil, authorizationToken: Swift.String = "", customProtocol: Swift.String? = nil, enableOfflineTracking: Swift.Bool = false, offlineTrackingTimeout: Foundation.TimeInterval = 3600)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension JentisSDK.ConsentModel.System.CodingKeys : Swift.Equatable {}
extension JentisSDK.ConsentModel.System.CodingKeys : Swift.Hashable {}
extension JentisSDK.ConsentModel.System.CodingKeys : Swift.RawRepresentable {}
extension JentisSDK.LogLevel : Swift.Equatable {}
extension JentisSDK.LogLevel : Swift.Hashable {}
extension JentisSDK.LogLevel : Swift.RawRepresentable {}
extension JentisSDK.Action : Swift.Equatable {}
extension JentisSDK.Action : Swift.Hashable {}
extension JentisSDK.Action : Swift.RawRepresentable {}
extension JentisSDK.ConsentStatus : Swift.Equatable {}
extension JentisSDK.ConsentStatus : Swift.Hashable {}
extension JentisSDK.ConsentStatus.CodingKeys : Swift.Equatable {}
extension JentisSDK.ConsentStatus.CodingKeys : Swift.Hashable {}
extension JentisSDK.ConsentStatus.CodingKeys : Swift.RawRepresentable {}
extension JentisSDK.TrackConfig.Environment : Swift.Equatable {}
extension JentisSDK.TrackConfig.Environment : Swift.Hashable {}
extension JentisSDK.TrackConfig.Environment : Swift.RawRepresentable {}
